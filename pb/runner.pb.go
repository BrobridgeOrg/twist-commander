// Code generated by protoc-gen-go. DO NOT EDIT.
// source: runner.proto

package twist

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactionCommand struct {
	TransactionID        string   `protobuf:"bytes,1,opt,name=transactionID,proto3" json:"transactionID,omitempty"`
	Command              string   `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Payload              *any.Any `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionCommand) Reset()         { *m = TransactionCommand{} }
func (m *TransactionCommand) String() string { return proto.CompactTextString(m) }
func (*TransactionCommand) ProtoMessage()    {}
func (*TransactionCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_48eceea7e2abc593, []int{0}
}

func (m *TransactionCommand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionCommand.Unmarshal(m, b)
}
func (m *TransactionCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionCommand.Marshal(b, m, deterministic)
}
func (m *TransactionCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionCommand.Merge(m, src)
}
func (m *TransactionCommand) XXX_Size() int {
	return xxx_messageInfo_TransactionCommand.Size(m)
}
func (m *TransactionCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionCommand.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionCommand proto.InternalMessageInfo

func (m *TransactionCommand) GetTransactionID() string {
	if m != nil {
		return m.TransactionID
	}
	return ""
}

func (m *TransactionCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *TransactionCommand) GetPayload() *any.Any {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*TransactionCommand)(nil), "twist.TransactionCommand")
}

func init() { proto.RegisterFile("runner.proto", fileDescriptor_48eceea7e2abc593) }

var fileDescriptor_48eceea7e2abc593 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2a, 0xcd, 0xcb,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x29, 0xcf, 0x2c, 0x2e, 0x91,
	0x92, 0x4c, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x26, 0x95, 0xa6, 0xe9, 0x27, 0xe6,
	0x55, 0x42, 0x54, 0x28, 0xb5, 0x30, 0x72, 0x09, 0x85, 0x14, 0x25, 0xe6, 0x15, 0x27, 0x26, 0x97,
	0x64, 0xe6, 0xe7, 0x39, 0xe7, 0xe7, 0xe6, 0x26, 0xe6, 0xa5, 0x08, 0xa9, 0x70, 0xf1, 0x96, 0x20,
	0x44, 0x3d, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x50, 0x05, 0x85, 0x24, 0xb8, 0xd8,
	0x93, 0x21, 0x1a, 0x24, 0x98, 0xc0, 0xf2, 0x30, 0xae, 0x90, 0x1e, 0x17, 0x7b, 0x41, 0x62, 0x65,
	0x4e, 0x7e, 0x62, 0x8a, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x88, 0x1e, 0xc4, 0x0d, 0x7a,
	0x30, 0x37, 0xe8, 0x39, 0xe6, 0x55, 0x06, 0xc1, 0x14, 0x19, 0x71, 0x70, 0xb1, 0x05, 0x81, 0x1d,
	0x9e, 0xc4, 0x06, 0x56, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xff, 0x74, 0x58, 0xc9,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerClient interface {
}

type runnerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerClient(cc *grpc.ClientConn) RunnerClient {
	return &runnerClient{cc}
}

// RunnerServer is the server API for Runner service.
type RunnerServer interface {
}

// UnimplementedRunnerServer can be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func RegisterRunnerServer(s *grpc.Server, srv RunnerServer) {
	s.RegisterService(&_Runner_serviceDesc, srv)
}

var _Runner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twist.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "runner.proto",
}
